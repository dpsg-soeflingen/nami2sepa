#!/bin/env python

import utils
import xml_convert

import pandas as pd
import datetime
from argparse import ArgumentParser
import json
import functools
import warnings
warnings.filterwarnings('ignore')


parser = ArgumentParser(prog="SEPA Creator", description="Erstellt eine csv-Datei fuer SEPA-Sammeleinzuege aus Daten aus dem NaMi.\
Gib in die Nami-Suche 'Beitragsart und Kontoverbindung' ein und uebergib das File unter der Option '-p'. In der Nami-Suche unter 'Mitglieder: Grundinformationen mit Taetigkeiten und Stufe Abteilung' wird ein File gedownloadet, das man unter der Option '-t' angeben muss. \
Des Weiteren gibt es das File Sepa_Informations.xlsx, das Mandatsdatum, Ersteinzugsdatum, manuellen Beitrag etc. angibt.")
parser.add_argument("-a", "--accounts_file", help="Pfad zur Excel-Datei, in der NaMi-Suche: 'Beitragsart und Kontoverbindung.'", required=True)
parser.add_argument("-t", "--tasks_file", help="Pfad zur Excel-Datei, in der NaMi-Suche: 'Mitglieder: Grundinformationen mit Taetigkeiten und Stufe Abteilung'.", required=True)
parser.add_argument("-i", "--sepa_infos", default="Sepa_Informations.xlsx", help="Pfad zur Excel-Datei, um SEPA-Infos zu erhalten, die nicht im NaMi gespeichert sind.")
parser.add_argument("-p", "--project_file", help="Pfad zur Excel-Datei, die Mitgliedsnummer und Betrag fuer eine Aktion angibt.")
parser.add_argument("-o", "--output", default="output.xml", help="Pfad zur Output-Datei, die der Bank fuer den Sammel-Einzug gegeben werden kann.")
args = parser.parse_args()


# Determine Leiter.
def determine_leiter(tasks_file_path):
    """
    Definition Leiter:
    - Is an active member (did not resign).
    - Has a current task (not yet finished) as a Leiter (Taetigkeit == "€ LeiterIn")
    - OR: Is Stammesvorstand (Stufe_Abteilung == "Vorstand")
    """
    tasks = pd.read_excel(tasks_file_path)
    leader_ids = tasks.loc[(tasks["Status"] == "AKTIV")\
            & (tasks["Aktiv_Bis"] == "-null-")\
            & ((tasks["Taetigkeit"] == "€ LeiterIn") | (tasks["Stufe_Abteilung"] == "Vorstand"))\
        ].groupby("Mitgliedsnummer").head(1)["Mitgliedsnummer"]
    return leader_ids


# Parse account information.
# [Only needs group-file]
def parse_account_information(accounts_file_path, leader_ids):
    group = pd.read_excel(accounts_file_path)
    group.index = group["Mitgliedsnummer"]
    group = group.loc[group["Status"] == "Aktiv"]

    group.loc[leader_ids, "Leader/CEO"] = True
    group["Leader/CEO"] = group["Leader/CEO"].fillna(False)

    sepa = group[["Vorname", "Nachname", "Mitgliedsnummer", "IBAN", "BIC", "BeitragArt", "Kontoinhaber", "Leader/CEO"]]
    # Get payer name.
    sepa[["Zahler_Vorname", "Zahler_Name"]] = sepa["Kontoinhaber"].str.rsplit(" ", n=1, expand=True)
    # Get payment-identification.
    sepa["Identifikation"] = "" # TODO
    sepa = sepa.rename({"Mitgliedsnummer": "Mandat"}, axis=1)
    return sepa


# Parse SEPA-Information not saved within NaMi.
def parse_external_sepa_information(sepa_information_file_path):
    sepa_information = pd.read_excel(sepa_information_file_path)
    sepa_dates = pd.DataFrame()
    sepa_dates["Mandat"] = sepa_information["Mitgliedsnummer"]
    sepa_dates["Mandatsdatum"] = sepa_information["Datum"].map(lambda e: e.date())
    # If this is the first Einzug, fill-in today's date.
    sepa_dates["Erstlastschrift"] = sepa_information["Erstlastschrift"].fillna(datetime.datetime.now())
    sepa_dates["Letztlastschrift"] = ""
    sepa_dates["OverrideBeitrag"] = sepa_information["OverrideBeitrag"]
    return sepa_dates


# Combine
def join(df1, df2):
    """
    Combine sepa and sepa_dates
    """
    return df1.join(df2.set_index("Mandat"), on="Mandat")


# PROJECT-SPECIFIC PARSING!
def parse_project_information(project_file_path, base_data):
    with open(project_file_path, "r") as project_file:
        project_information = json.load(project_file)
    fee_info = pd.DataFrame.from_dict(project_information["Beitragsinformationen"], orient="index", columns=["Beitrag"])
    if len(fee_info) > 0:
        project_data = base_data.loc[base_data["Mandat"].astype(str).isin(fee_info.index)][["Mandat", "Vorname", "Nachname", "BeitragArt", "Leader/CEO"]]
    else:
        project_data = base_data[["Mandat", "Vorname", "Nachname", "BeitragArt", "Leader/CEO"]]
    # Insert Verwendungszweck.
    project_data["Verwendungszweck"] = project_data.apply(functools.partial(utils.parse_verwendungszweck, description=project_information["Verwendungszweck"]), axis=1)

    # Calculate Beitrag
    fee_info.index = fee_info.index.astype(int)
    project_data["AktionBeitrag"] = fee_info["Beitrag"]

    return project_data[["Mandat", "AktionBeitrag", "Verwendungszweck"]]


def output_xml(df, file_path):
    with open("output.xml", "w") as out_file:
        out_file.write(xml_convert.generate_xml(sepa))


def calc_beitrag(df):
    # Standard beitrag calculation
    df["Beitrag"] = df.apply(lambda row: utils.calc_beitrag(row), axis=1)
    # Manual Beitrag override
    df["Beitrag"] = df["OverrideBeitrag"].fillna(df["Beitrag"])
    # Aktions-Beitrag
    df["Beitrag"] = df["AktionBeitrag"].fillna(df["Beitrag"])
    return df


if __name__ == "__main__":
    leiter_ids = determine_leiter(args.tasks_file)
    accounts_info = parse_account_information(args.accounts_file, leiter_ids)
    sepa_info = parse_external_sepa_information(args.sepa_infos)
    project_data = parse_project_information(args.project_file, accounts_info)
    data = join(accounts_info, sepa_info)
    data = join(data, project_data)
    data = data.loc[data["Mandat"].isin(project_data.index)]
    data = calc_beitrag(data)

    # TODO Activate/Deactivate in config!
    # Should be called "ignore-members"
    # Remove members within Sozialtopf.
    # sepa = sepa[sepa["Beitrag"] > 0]

    # Sort columns.
    data = data \
        .drop(["BeitragArt", "Leader/CEO", "Vorname", "Nachname", "Kontoinhaber"], axis=1) \
        .rename({"Zahler_Vorname": "Vorname", "Zahler_Name": "Name"}, axis=1) \
        .reset_index() \
        .drop("Mitgliedsnummer", axis=1)
    data.index.name = "Nummer"
    data.index += 1
    # sort columns
    sepa  = data[["Name", "Vorname", "Identifikation", "BIC", "IBAN", "Mandat", "Mandatsdatum", "Erstlastschrift", "Letztlastschrift", "Beitrag", "Verwendungszweck"]]
    output_xml(sepa, args.output)

